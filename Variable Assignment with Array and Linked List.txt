
	.global main, Stop, CodeEnd
	.global DataStart, DataEnd
	.global Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9, Q10
	.global A, B, C
	.global i, j, k
	.global head
	.global ans_b, ans_s, ans_i

main:


// Write assembler instruction here to execute:
//         ans_b = A[3];
Q1:

movw r0, #:lower16:A
movt r0, #:upper16:A

ldrsb r1, [r0, #3]

movw r0, #:lower16:ans_b
movt r0, #:upper16:ans_b

strb r1, [r0]


// Write assembler instruction here to execute:
//         ans_i = B[8];
Q2:

movw  r0, #:lower16:B
movt  r0, #:upper16:B         
                        
ldrsh r1, [r0, #16]           

movw r0, #:lower16:ans_i
movt r0, #:upper16:ans_i

str r1, [r0]


// Write assembler instruction here to execute:
//         ans_s = C[k];
Q3:

movw r0, #:lower16:C
movt r0, #:upper16:C

movw r1, #:lower16:k
movt r1, #:upper16:k

ldr  r1, [r1]
add  r1, r1, r1 
add  r1, r1, r1
     
ldr  r2, [r0, r1]

movw r0, #:lower16:ans_s
movt r0, #:upper16:ans_s

str r2, [r0]


// Write assembler instruction here to execute:
//         ans_s = A[i + j];      
Q4:

movw r0, #:lower16:A
movt r0, #:upper16:A

movw r1, #:lower16:i
movt r1, #:upper16:i
ldrsb r1, [r1]

movw r2, #:lower16:j
movt r2, #:upper16:j
ldrsh r2, [r2]

add r3, r2, r1
ldrsb r2, [r0, r3] //ldrsb because A stores things in bytes

movw r1, #:lower16:ans_s
movt r1, #:upper16:ans_s

strh r2, [r1] //str h bc ans_s is storing things in short


// Write assembler instruction here to execute:
//         ans_s = C[j + k];      
Q5:

movw r0, #:lower16:C
movt r0, #:upper16:C

movw r1, #:lower16:k
movt r1, #:upper16:k
ldr r1, [r1]

movw r2, #:lower16:j
movt r2, #:upper16:j
ldrsh r2, [r2]

add r3, r1, r2

add r3, r3, r3
add r3, r3, r3 //fit for array C

ldr r2, [r0, r3] //ldr because C stores things in int

movw r1, #:lower16:ans_s
movt r1, #:upper16:ans_s

strh r2, [r1] //str h bc ans_s is storing things in short


// Write assembler instruction here to execute:
//         ans_i = A[i] + B[k];  
Q6:
movw r0, #:lower16:A
movt r0, #:upper16:A

movw r1, #:lower16:i
movt r1, #:upper16:i
ldrsb r1, [r1]

ldrsb r2, [r0, r1] //ldrsb because A stores things in bytes

movw r0, #:lower16:B
movt r0, #:upper16:B

movw r1, #:lower16:k
movt r1, #:upper16:k
ldr r1, [r1] //ldr because k is a int

add r1, r1, r1 //will need to multiply k by 2 since array B is a short array

ldrsh r1, [r0, r1] //ldrsh because B stores things in short

movw r0, #:lower16:ans_i
movt r0, #:upper16:ans_i

add r1, r1, r2
str r1, [r0]



// Write assembler instruction here to execute:
//         ans_i = B[A[k] - 50];      
Q7:
movw r0, #:lower16:A
movt r0, #:upper16:A

movw r1, #:lower16:k
movt r1, #:upper16:k
ldr r1, [r1] //ldr because k is a int

ldrsb r0, [r0, r1] //ldrsb because A stores things in bytes
sub r0, r0, #50 //subtract 50 from A[k], store value in r0

movw r1, #:lower16:B
movt r1, #:upper16:B

add r0, r0, r0 //will need to multiply k by 2 since array B is a short array

ldrsh r1, [r1, r0] //ldrsh because B stores things in short, r1 is now B[A[k] - 50]

movw r0, #:lower16:ans_i
movt r0, #:upper16:ans_i

str r1, [r0]


// Write assembler instruction here to execute:
//         ans_s = B[14]
Q8:
movw r0, #:lower16:B
movt r0, #:upper16:B

ldrsh r0, [r0, #28]

movw r1, #:lower16:ans_s
movt r1, #:upper16:ans_s

strh r0, [r1]

//this loads 3333 because when you get past array B, there is some gap
//between array B and array C

//ask Dr. Cheung office hours


// Write assembler instruction here to execute:
//	  ans_i = head.value3;
Q9:

movw    r0, #:lower16:head
movt    r0, #:upper16:head      // r0 = addr(head)

ldr     r0, [r0]                // r0 = head.next = addr(1st list elem)
//more explanation here would be good -- office hours
ldrsh     r1, [r0,#6]    	// r1 = head.value3
//since value3 in list1 is 6 bytes away we must move 6


movw r0, #:lower16:ans_i
movt r0, #:upper16:ans_i

str r1, [r0]

// Write assembler instruction here to execute:
//	  ans_s = head.next.next.value1;
Q10:
movw    r0, #:lower16:head
movt    r0, #:upper16:head      // r0 = addr(head)
ldr     r0, [r0]                // r0 = head.next = addr(1st list elem)
ldr     r0, [r0,#8]             // r0 = head.next = addr(2nd list elem) !!!
ldr     r0, [r0,#8]             // r0 = head.next.next = addr(3rd list elem) !!!       

ldr     r1, [r0]                // r1 = head.next.next.value1

movw r0, #:lower16:ans_s
movt r0, #:upper16:ans_s

strh r1, [r0]

//************************************************
// Don't change any thing below this line  !!!!!
//************************************************

Stop:	nop

CodeEnd:
	nop

//***********************************************************************
// Data segment
//***********************************************************************

	.data
DataStart:
//***********************************************************************
// I have defined the ans_b, ans_s and ans_i variables below this line
//
// Don't touch these variables !!!!
// Also: you do NOT need to define any more variables !!!
//***********************************************************************
	.align
ans_b:  .skip  1		// Uninit byte variable

	.align
ans_s:  .skip  2		// Uninit short variable

	.align
ans_i:  .skip  4		// Uninit int variable

	.align
i:      .byte  2		// byte i = 2;

	.align
j:      .2byte 3		// short j = 3;

	.align
k:      .4byte  4		// int k = 4;

// arrays  A (byte), B(short) and C(int)
	.align
A:      .byte     11, -22, 33, -44, 55, -66, 77, -88, 99, -123

	.align
B:      .2byte    111, -222, 333, -444, 555, -666, 777, -888, 999, -5432

	.align
C:      .4byte  1111, -2222, 3333, -4444, 5555, -6666, 7777, -8888, 9999, -9876

// Linked list
//
// head ->[1234,89,-11]->[2345,78,66]->[-3456,67,44]->[4567,56,77]->[5678,45,44]

	.align 4
head:   .4byte  list1

list3:  .4byte  -3456
        .2byte 67
        .2byte 44
	.4byte  list4

list2:  .4byte  2345
        .2byte 78
        .2byte 66
	.4byte  list3

list4:  .4byte  4567
        .2byte 56
        .2byte 77
	.4byte  list5

list1:  .4byte  1234
        .2byte 89
        .2byte -11
	.4byte  list2

list5:  .4byte  5678
        .2byte 45
        .2byte 44
	.4byte  0

DataEnd:
	.end

